using UnityEngine;
using UnityEditor;
using UltimateIsometricToolkit.physics;
using System.Collections.Generic;
using System;

/**
 * Iso Dropzones used in the Civil Mini-game
 */
public class IsoDropZone : MonoBehaviour, IDropZone
{

    /**
     * For factories (drop zones that generate road blocks)
     */
    private GameObject child;  // The prefab currently generated by the factory
    public string prefebName;  // Prefab to instantiate by the factory
    public int ItemPrice = 0;  // Cost of the block generated by the factory
    
    public List<string> droppableNames;  // Blocks that are valid to be placed on this drop zone
    public bool Returner = false;  // If the drop zone returns blocks
    private Draggable currentItem;  // Item currently in the drop zone
    private bool isEnabled = true;  // The drop zone can have items placed into it

    public void Start()
    {

        var rigidbody = GetComponent<Rigidbody2D>();
        if (rigidbody == null)
        {
            rigidbody = gameObject.AddComponent<Rigidbody2D>();
            rigidbody.bodyType = RigidbodyType2D.Kinematic;
        }

        createPrefeb();
    }

    /** 
    * Create a new tile prefab to be placed on top of the factory for road building 
    */
    void createPrefeb()
    {
        if (prefebName != "")
        {
            // instantiate
            GameObject prefab = Resources.Load<GameObject>("Prefabs/" + prefebName);
            // Link the child the prefab to the factory
            child = Instantiate<GameObject>(prefab);
            child.GetComponent<DraggableIsoItem>().SetDropZone(this);
            child.GetComponent<DraggableIsoItem>().homePos = transform.position;
        }
    }

    /**
     * Item dragged on top of this drop zone
     */
    public void OnDragEnter(Draggable item)
    {
        if(isEnabled)
        {
            //SetDropZoneActive(false);
            GetComponent<SpriteRenderer>().color = new Color(1.0f, 0.0f, 0.0f); // Red
        }

    }

    /**
     * Item dragged away from this drop zone
     */
    public void OnDragExit(Draggable item)
    {
        if(isEnabled) {
            GetComponent<SpriteRenderer>().color = new Color(1.0f, 1.0f, 1.0f); // White
        }


    }

    /**
     * Item dragged into the drop zone and placed there
     */
    public void OnDragFinish(Draggable item)
    {
        SetDropZoneActive(false); // Disable the drop zone
        GetComponent<SpriteRenderer>().sortingLayerName = "BackGround"; // Send the drop zone backwards
    }

    /**
     * Item dragged away from the drop zone and removed
     */
    public void OnDragStart(Draggable item)
    {
        GetComponent<SpriteRenderer>().sortingLayerName = "Ground";
    }

    /**
     * Item placed on a drop zone
     */
    public void OnDrop(Draggable item)
    {
        currentItem = item;
        currentItem.HomePos = transform.position;
        GetComponent<SpriteRenderer>().color = new Color(1.0f, 1.0f, 1.0f);
        GetComponent<SpriteRenderer>().sortingLayerName = "BackGround";

        // Update budget if this drop zone is a factory/returner
        if (prefebName != "" || Returner)
        {
            GameObject.Find("CivilLevelController").GetComponent<CivilLevelController>().UpdateBudget(((DraggableIsoItem)item).Price);
            // delete the returned block to prevent duplicated building blocks been instantiated
            item.gameObject.SetActive(false);
        }
        else // Otherwise disable the ground tile
        {
            gameObject.SetActive(false);
        }
    }

    public void OnItemDrag(Draggable item)
    {
        // Interface implementation
    }

    /**
     * Item removed from the drop zone
     */
    public void OnItemRemove(Draggable item)
    {
        currentItem = null;
        createPrefeb();
        gameObject.SetActive(true);
        SetDropZoneActive(true);

        // Update budget
        GameObject.Find("CivilLevelController").GetComponent<CivilLevelController>().UpdateBudget(-ItemPrice);
    }

    public bool CanDrop(Draggable item)
    {
        // Interface implementation
        return true;
    }

    /*
     * Enable or disable the drop zone by changing whether or not it can be hit by a ray cast
     */
    private void SetDropZoneActive(bool enable)
    {
        gameObject.layer = enable ? 1 : 2;
    }

    /** 
     * Display the tile factories as enabled or disabled depending on budget availability 
     */
    public void setEnable(bool enable)
    {
        if (enable == isEnabled) return;
        isEnabled = enable;

        if (!enable) // Disabling factory
        {
            child.SetActive(false); // Hide the created prefab from being dragged
            GetComponent<SpriteRenderer>().color = new Color(0.49f, 0.49f, 0.49f); // Gray
        }
        else // Enabling factory
        {
            child.SetActive(true);  // Enable the created prefab to be dragged
            GetComponent<SpriteRenderer>().color = new Color(1.0f, 1.0f, 1.0f); // White
        }
    }
}
