using System.Collections.Generic;
using UnityEngine;

/**
 * Iso Dropzones used in the Civil Mini-game
 */
public class IsoDropZone : MonoBehaviour, IDropZone
{
    /**
     * For factories (drop zones that generate road blocks)
     */
    private GameObject _child; // The prefab currently generated by the factory
    public string prefebName; // Prefab to instantiate by the factory
    public int ItemPrice = 0; // Cost of the block generated by the factory

    public List<string> droppableNames; // Blocks that are valid to be placed on this drop zone
    public bool Returner = false; // If the drop zone returns blocks
    private Draggable _currentItem; // Item currently in the drop zone
    private bool _isEnabled = true; // The drop zone can have items placed into it

    /**
     * Get component fields
     */
    private SpriteRenderer _spriteRenderer;

    private void Awake()
    {
        _spriteRenderer = GetComponent<SpriteRenderer>();
    }

    public void Start()
    {
        var rigidbody = GetComponent<Rigidbody2D>();
        if (rigidbody == null)
        {
            rigidbody = gameObject.AddComponent<Rigidbody2D>();
            rigidbody.bodyType = RigidbodyType2D.Kinematic;
        }

        CreatePrefab();
    }

    /** 
    * Create a new tile prefab to be placed on top of the factory for road building 
    */
    private void CreatePrefab()
    {
        if (prefebName == "") return;
        // instantiate
        GameObject prefab = Resources.Load<GameObject>("Prefabs/" + prefebName);
        // Link the child the prefab to the factory
        _child = Instantiate(prefab);
        _child.GetComponent<DraggableIsoItem>().SetDropZone(this);
        _child.GetComponent<DraggableIsoItem>().homePos = transform.position;
    }

    /**
     * Item dragged on top of this drop zone
     */
    public void OnDragEnter(Draggable item)
    {
        if (!_isEnabled) return;
        CheckSpriteRenderer();
        _spriteRenderer.color = new Color(1.0f, 0.0f, 0.0f); // Red
    }

    /**
     * Item dragged away from this drop zone
     */
    public void OnDragExit(Draggable item)
    {
        if (!_isEnabled) return;
        CheckSpriteRenderer();
        _spriteRenderer.color = new Color(1.0f, 1.0f, 1.0f); // White
    }

    /**
     * Item dragged into the drop zone and placed there
     */
    public void OnDragFinish(Draggable item)
    {
        CheckSpriteRenderer();
        SetDropZoneActive(false); // Disable the drop zone
        _spriteRenderer.sortingLayerName = "BackGround"; // Send the drop zone backwards
    }

    /**
     * Item dragged away from the drop zone and removed
     */
    public void OnDragStart(Draggable item)
    {
        CheckSpriteRenderer();
        _spriteRenderer.sortingLayerName = "Ground";
    }

    /**
     * Item placed on a drop zone
     */
    public void OnDrop(Draggable item)
    {
        _currentItem = item;
        _currentItem.HomePos = transform.position;
        CheckSpriteRenderer();
        _spriteRenderer.color = new Color(1.0f, 1.0f, 1.0f);
        _spriteRenderer.sortingLayerName = "BackGround";

        // Update budget if this drop zone is a factory/returner
        if (prefebName != "" || Returner)
        {
            GameObject.Find("CivilLevelController").GetComponent<CivilLevelController>()
                .UpdateBudget(((DraggableIsoItem) item).Price);
            // delete the returned block to prevent duplicated building blocks been instantiated
            item.gameObject.SetActive(false);
        }
        else // Otherwise disable the ground tile
        {
            gameObject.SetActive(false);
        }
    }

    public void OnItemDrag(Draggable item)
    {
        // Interface implementation
    }

    /**
     * Item removed from the drop zone
     */
    public void OnItemRemove(Draggable item)
    {
        _currentItem = null;
        CreatePrefab();
        gameObject.SetActive(true);
        SetDropZoneActive(true);

        // Update budget
        GameObject.Find("CivilLevelController").GetComponent<CivilLevelController>().UpdateBudget(-ItemPrice);
    }

    public bool CanDrop(Draggable item)
    {
        // Interface implementation
        return true;
    }

    /*
     * Enable or disable the drop zone by changing whether or not it can be hit by a ray cast
     */
    private void SetDropZoneActive(bool enable)
    {
        gameObject.layer = enable ? 1 : 2;
    }

    /** 
     * Display the tile factories as enabled or disabled depending on budget availability 
     */
    public void SetEnable(bool enable)
    {
        if (enable == _isEnabled) return;
        _isEnabled = enable;
        CheckSpriteRenderer();
        if (!enable) // Disabling factory
        {
            _child.SetActive(false); // Hide the created prefab from being dragged
            _spriteRenderer.color = new Color(0.49f, 0.49f, 0.49f); // Gray
        }
        else // Enabling factory
        {
            _child.SetActive(true); // Enable the created prefab to be dragged
            _spriteRenderer.color = new Color(1.0f, 1.0f, 1.0f); // White
        }
    }

    /**
     * Double check the sprite renderer isn't null before using it
     */
    private void CheckSpriteRenderer()
    {
        if (_spriteRenderer != null) return;
        _spriteRenderer = GetComponent<SpriteRenderer>();
    }
}